{"version":3,"sources":["AskQuestion.js","PostAnswer.js","Question.js","Questions.js","App.js","serviceWorker.js","index.js"],"names":["AskQuestion","props","state","title","description","event","this","setState","target","name","value","preventDefault","askQuestion","className","htmlFor","type","placeholder","onChange","handleChange","onClick","handleButtonClick","id","Component","PostAnswer","author","answer","postAnswer","Question","console","log","getRecipe","Fragment","to","answers","map","e","key","_id","authorName","Questions","questionList","App","API_URL","process","getData","url","fetch","then","result","json","catch","error","find","String","method","body","JSON","stringify","headers","response","qID","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a791ffe.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n// import Questions from \"./Questions\";\r\n\r\nclass AskQuestion extends Component {\r\n\r\n    constructor(props) {\r\n        super(props); // You always need this line in the constructor to call the constructor in the super class.\r\n        this.state = { // When initializing the state in the constructor, you just create it as an object.\r\n            title: \"\", // input is initialized to the empty string.\r\n            description: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n      this.setState( {\r\n          [event.target.name]: event.target.value\r\n          })\r\n\r\n    }\r\n    handleButtonClick(event) {\r\n        event.preventDefault();\r\n        // this.props.askQuestion(this.state.title, this.state.description); // Add the task to the state in App.js\r\n        this.props.askQuestion(this.state.title, this.state.description); // Add the task to the state in App.js\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <form>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"itemText\">Title of question <br/></label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"title\"\r\n                                   placeholder=\"title of question\"\r\n                                   onChange={event => this.handleChange(event)}\r\n                            />\r\n                            <br/>\r\n                            <label htmlFor=\"itemText\">Question<br/></label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"description\"\r\n                                   placeholder=\"title of question\"\r\n                                   onChange={event => this.handleChange(event)}\r\n                            />\r\n                        </div>\r\n                        <button onClick={(event) => this.handleButtonClick(event)}\r\n                                type=\"submit\" id=\"submitItemBtn\" className=\"btn btn-primary\">Add Task\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AskQuestion;\r\n\r\n\r\n","import React, {Component} from 'react';\r\n// import Questions from \"./Questions\";\r\n\r\nclass PostAnswer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props); // You always need this line in the constructor to call the constructor in the super class.\r\n\r\n        this.state = { // When initializing the state in the constructor, you just create it as an object.\r\n            author: \"\", // input is initialized to the empty string.\r\n            answer: \"\"\r\n        };\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    handleButtonClick(event) {\r\n        event.preventDefault(); // Prevents the form button reloading the whole page. We don't do reloads in a SPA.\r\n        this.props.postAnswer(this.state.author, this.state.answer); // Add the task to the state in App.js\r\n\r\n        // this.props.addTask is actually the arrow function in App.js (from the render method)\r\n        // defined in <AddTask addTask={(task) => this.addTask(task)}/>\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <form>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"itemText\">Author <br/></label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"author\"\r\n                                   placeholder=\"title of question\"\r\n                                   onChange={event => this.handleChange(event)}\r\n                            />\r\n                            <br/>\r\n                            <label htmlFor=\"itemText\">Answer<br/></label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"answer\"\r\n                                   placeholder=\"title of question\"\r\n                                   onChange={event => this.handleChange(event)}\r\n                            />\r\n                        </div>\r\n                        <button onClick={(event) => this.handleButtonClick(event)}\r\n                                type=\"submit\" id=\"submitItemBtn\" className=\"btn btn-primary\">Add Task\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default PostAnswer;\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\nimport AskQuestion from \"./AskQuestion\";\r\nimport PostAnswer from \"./PostAnswer\";\r\n// import Difficulity from \"./Difficulity\";\r\n\r\nclass Question extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        console.log(this.props.getRecipe(this.props.id), \"Test\")\r\n        console.log(this.props.id)\r\n        // this.state = {\r\n        //     question: this.props.getRecipe(this.props.id),\r\n        //     answers: [...this.props.getRecipe(this.props.id).answers]\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        let title = \"Recipe not found\";\r\n\r\n        // if (this.state.question) {\r\n        //     title = this.state.question.title;\r\n        // }\r\n        if (this.props.getRecipe(this.props.id)) {\r\n            title = this.props.getRecipe(this.props.id).title;\r\n        }\r\n        return(\r\n            <React.Fragment>\r\n                <Link to={`/`}>back to recipes</Link>\r\n                <h1>{title}</h1>\r\n                {/*<p>{this.state.question.description}</p>*/}\r\n                <p>{this.props.getRecipe(this.props.id).description}</p>\r\n                <h4>Svar</h4>\r\n                <PostAnswer postAnswer={(author, answer) => this.props.postAnswer(author, answer, this.props.id )}/>\r\n                <ul>\r\n                    {this.props.getRecipe(this.props.id).answers.map(e =>\r\n                        <li key={e._id}>\r\n                            <p> Skrevet af: {e.authorName}</p>\r\n                            <p>{e.answer}</p>\r\n                        </li>)}\r\n                </ul>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;\r\n","import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\nimport AskQuestion from \"./AskQuestion\";\r\n// import Task from \"../../../../Lesson 1/Exercise 2/frameworks_fall19/lesson03/todoapp_example/src/Task\";\r\n\r\nclass Questions extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                <h1>Recipes</h1>\r\n                <ul>{/* Cheap trick to define some data right in the render method and turn it into a list */}\r\n                    {this.props.questionList.map(e =>\r\n                        <li key={e._id}>\r\n                            <Link to={`/question/${e._id}`}>{e.title}</Link>\r\n                        </li>)}\r\n                </ul>\r\n                <AskQuestion askQuestion={(title, description) => this.props.askQuestion(title, description)}/>\r\n\r\n\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Questions;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Question from './Question'\nimport Questions from \"./Questions\";\nimport {Router} from \"@reach/router\";\n\nclass App extends Component {\n\n    // API_URL =  process.env.NODE_ENV === 'production' ? process.env.REACT_APP_PROD_API_URL : process.env.REACT_APP_DEV_API_URL;\n    API_URL = process.env.REACT_APP_API_URL\n    // const apiUrl = process.env.NODE_ENV === 'production' ? process.env.REACT_APP_PROD_API_URL : process.env.REACT_APP_DEV_API_URL;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      questionList: []\n    };\n  }\n  componentDidMount() {\n    this.getData();\n  }\n  getData() {\n      console.log(process.env.NODE_ENV)\n    const url = `${this.API_URL}/questions`;\n    fetch(url)\n        .then(result => result.json()) // Convert to JSON\n        .then(result => { // Put it in the state\n          this.setState({\n            questionList: result\n          })\n        })\n        .catch((error) => { // Catch any errors and write them to the browser console\n          console.error(error);\n        });\n  }\n\n  getRecipe(_id){\n    return this.state.questionList.find(e => e._id === String(_id));\n  }\n\n  askQuestion(title, description) {\n    const url = `${this.API_URL}/questions`;\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        title: title,\n        description: description,\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    })\n        .then(response => response.json())\n        .then(json => {\n          console.log(\"Result of posting a new task:\");\n          console.log(json);\n          this.getData();\n        });\n  }\n\n  postAnswer(author, answer, qID) {\n    const url = `${this.API_URL}/question/`+ qID;\n    fetch(url, {\n      method: 'PUT',\n      body: JSON.stringify({\n        authorName: author,\n        answer: answer,\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    })\n        .then(response => response.json())\n        .then(json => {\n          this.getData();\n        });\n  }\n\n  render() {\n    return (\n        <React.Fragment>\n          <Router>\n            <Questions path=\"/\" questionList={this.state.questionList} askQuestion={(title, description) => this.askQuestion(title, description)}/>\n            <Question path=\"/question/:id\" getRecipe={(_id) => this.getRecipe(_id)} postAnswer={(author, answer, qID) => this.postAnswer(author, answer, qID)}/>\n            {/*<Filter path=\"/recipe/with/:filter\" getFilter={(ingredient) => this.getFilter(ingredient)}/>*/}\n          </Router>\n\n        </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}