{"version":3,"sources":["Util.js","PostAnswer.js","Vote.js","Question.js","AskQuestion.js","Questions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","stringArraysEqual","array1","array2","equal","i","length","PostAnswer","props","state","author","answer","votes","event","this","setState","target","name","value","preventDefault","postAnswer","className","htmlFor","type","placeholder","onChange","handleChange","onClick","handleButtonClick","id","Component","Vote","handleButtonClickDownvote","handleButtonClickUpvote","Question","question","getQuestion","content","Fragment","to","title","description","answers","map","e","key","_id","authorName","AskQuestion","askQuestion","Questions","questionList","App","API_URL","process","getData","then","console","log","url","fetch","result","json","find","String","method","body","JSON","stringify","headers","response","qID","aId","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04b1fff4.chunk.js","sourcesContent":["function stringArraysEqual(array1, array2) {\r\n    if (!array1 || ! array2) return false;\r\n    let equal = true;\r\n    for (let i = 0; i < array1.length && equal; i++) {\r\n        if (array1[i] !== array2[i]) {\r\n            equal = false;\r\n        }\r\n    }\r\n    return equal;\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    stringArraysEqual: stringArraysEqual\r\n};","import React, {Component} from 'react';\r\n\r\nclass PostAnswer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            author: \"\",\r\n            answer: \"\",\r\n            votes: 0\r\n        };\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    handleButtonClick(event) {\r\n        event.preventDefault(); // Prevents the form button reloading the whole page. We don't do reloads in a SPA.\r\n        this.props.postAnswer(this.state.author, this.state.answer, this.state.votes); // Add the task to the state in App.js\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <form>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"itemText\">Author <br/></label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"author\"\r\n                                   placeholder=\"title of question\"\r\n                                   onChange={event => this.handleChange(event)}\r\n                            />\r\n                            <br/>\r\n                            <label htmlFor=\"itemText\">Answer<br/></label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"answer\"\r\n                                   placeholder=\"title of question\"\r\n                                   onChange={event => this.handleChange(event)}\r\n                            />\r\n                        </div>\r\n                        <button onClick={(event) => this.handleButtonClick(event)}\r\n                                type=\"submit\" id=\"submitItemBtn\" className=\"btn btn-primary\">Post answer\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default PostAnswer;\r\n\r\n\r\n","import React, {Component} from 'react';\r\n\r\nclass PostAnswer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleButtonClickUpvote(event) {\r\n        event.preventDefault();\r\n\r\n        this.props.Vote(1);\r\n    }\r\n    handleButtonClickDownvote(event) {\r\n        event.preventDefault();\r\n        this.props.Vote(-1);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <form>\r\n                        <button onClick={(event) => this.handleButtonClickDownvote(event)}\r\n                                type=\"submit\" id=\"submitItemBtn\" className=\"btn btn-primary\">downvote\r\n                        </button>\r\n                        <button onClick={(event) => this.handleButtonClickUpvote(event)}\r\n                                type=\"submit\" id=\"submitItemBtn\" className=\"btn btn-primary\">Upvote\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default PostAnswer;\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\nimport PostAnswer from \"./PostAnswer\";\r\nimport Vote from \"./Vote\";\r\n\r\nclass Question extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n            const question = this.props.getQuestion(this.props.id);\r\n            let content = <p>Loading</p>;\r\n            if (question) {\r\n                content =\r\n                    <React.Fragment>\r\n                        <Link to={`/`}>back to questions</Link>\r\n                        <h1>{question.title}</h1>\r\n                        <p>{this.props.getQuestion(this.props.id).description}</p>\r\n                        <h4>Svar</h4>\r\n                        <PostAnswer postAnswer={(author, answer, votes) => this.props.postAnswer(author, answer, votes ,this.props.id )}/>\r\n                        <ul>\r\n                            {this.props.getQuestion(this.props.id).answers.map(e =>\r\n                                <li key={e._id}>\r\n                                    <p> Skrevet af: {e.authorName}</p>\r\n                                    <p>{e.answer}</p>\r\n                                    <p>votes {e.votes}</p>\r\n                                    <Vote Vote={(votes) => this.props.Vote(votes, e._id)}></Vote>\r\n                                </li>)}\r\n                        </ul>\r\n                    </React.Fragment>\r\n            }\r\n\r\n            return content;\r\n    }\r\n}\r\n\r\nexport default Question;\r\n","import React, {Component} from 'react';\r\n\r\nclass AskQuestion extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: \"\",\r\n            description: \"\"\r\n        }\r\n    }\r\n\r\n    handleChange(event) {\r\n      this.setState( {\r\n          [event.target.name]: event.target.value\r\n          })\r\n\r\n    }\r\n    handleButtonClick(event) {\r\n        event.preventDefault();\r\n        this.props.askQuestion(this.state.title, this.state.description);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <form>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"itemText\">Title of question <br/></label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"title\"\r\n                                   placeholder=\"title of question\"\r\n                                   onChange={event => this.handleChange(event)}\r\n                            />\r\n                            <br/>\r\n                            <label htmlFor=\"itemText\">Question<br/></label>\r\n                            <input type=\"text\" className=\"form-control\" name=\"description\"\r\n                                   placeholder=\"title of question\"\r\n                                   onChange={event => this.handleChange(event)}\r\n                            />\r\n                        </div>\r\n                        <button onClick={(event) => this.handleButtonClick(event)}\r\n                                type=\"submit\" id=\"submitItemBtn\" className=\"btn btn-primary\">Ask Question\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AskQuestion;\r\n\r\n\r\n","import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\nimport AskQuestion from \"./AskQuestion\";\r\n\r\nclass Questions extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                <h1>Questions</h1>\r\n                <ul>\r\n                    {this.props.questionList.map(e =>\r\n                        <li key={e._id}>\r\n                            <Link to={`/question/${e._id}`}>{e.title}</Link>\r\n                        </li>)}\r\n                </ul>\r\n                <AskQuestion askQuestion={(title, description) => this.props.askQuestion(title, description)}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Questions;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport Question from './Question'\r\nimport Questions from \"./Questions\";\r\nimport {Router} from \"@reach/router\";\r\nimport { stringArraysEqual } from './Util';\r\n\r\nclass App extends Component {\r\n\r\n    API_URL = process.env.REACT_APP_API_URL\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      questionList: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.getData().then(() => console.log(\"Data gotten\"));\r\n  }\r\n    async getData() {\r\n    const url = `${this.API_URL}/questions`;\r\n        let result = await fetch(url); // Get the data\r\n        let json = await result.json(); // Turn it into json\r\n        return this.setState({ // Set it in the state\r\n            questionList: json\r\n        })\r\n  }\r\n    // async loadQuestionData(id) {\r\n    //     const updateQuestion = (question) => {\r\n    //         const index = this.state.questionList.findIndex(k => k._id === id);\r\n    //         if (index === -1) return; // Return if kitten is not yet in app.js state\r\n    //         const localQuestion = this.state.questionList[index];\r\n    //\r\n    //         // See if the kitten has new data\r\n    //         let equal = stringArraysEqual(JSON.stringify(question.answers), JSON.stringify(localQuestion.answers));\r\n    //\r\n    //         // Only update state if data is new (not equal)!\r\n    //         // Otherwise, this will result in an infinite React re-render loop!\r\n    //         if (!equal) {\r\n    //             console.log(\"Updating local kitten state with new data\", question._id);\r\n    //             const newQuestionsState = this.state.questionList;\r\n    //             newQuestionsState[index] = question; // Replace old data with new\r\n    //             this.setState({ // Update state\r\n    //                 questionList: newQuestionsState\r\n    //             })\r\n    //         }\r\n    //     };\r\n    //     try {\r\n    //         let url = `${this.API_URL}/question/${id}`; // URL of the API.\r\n    //         let result = await fetch(url); // Get the data\r\n    //         let question = await result.json(); // Turn it into json\r\n    //         updateQuestion(question); // Kitten loaded, let's update state.\r\n    //     } catch (e) {\r\n    //         console.error(e);\r\n    //     }\r\n    // }\r\n\r\n    getQuestion(_id){\r\n        // this.loadQuestionData(_id).then(console.log(\"Kitten fetched\", _id));\r\n        // Find the relevant kitten by id - not waiting for new data.\r\n        // return this.state.questionList.find(k => k._id === id);\r\n      return this.state.questionList.find(e => e._id === String(_id));\r\n  }\r\n\r\n  askQuestion(title, description) {\r\n    const url = `${this.API_URL}/questions`;\r\n    fetch(url, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        title: title,\r\n        description: description,\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\"\r\n      }\r\n    })\r\n        .then(response => response.json())\r\n        .then(json => {\r\n          this.getData();\r\n        });\r\n  }\r\n\r\n\r\n  postAnswer(author, answer, votes, qID) {\r\n    const url = `${this.API_URL}/question/`+ qID;\r\n    fetch(url, {\r\n          method: 'PUT',\r\n          body: JSON.stringify({\r\n              authorName: author,\r\n              answer: answer,\r\n              votes: votes\r\n          }),\r\n          headers: {\r\n              \"Content-type\": \"application/json; charset=UTF-8\"\r\n          }\r\n      })\r\n          .then(response => response.json())\r\n          .then(json => {\r\n              this.getData();\r\n          });\r\n  }\r\n    Vote(votes, aId){\r\n        const url = `${this.API_URL}/question/answers/`+ aId;\r\n        fetch(url, {\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                votes: votes\r\n            }),\r\n            headers: {\r\n                \"Content-type\": \"application/json; charset=UTF-8\"\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.getData();\r\n            });\r\n  }\r\n  render() {\r\n    return (\r\n        <React.Fragment>\r\n          <Router>\r\n            <Questions path=\"/\" questionList={this.state.questionList} askQuestion={(title, description) => this.askQuestion(title, description)}/>\r\n            <Question path=\"/question/:id\" getQuestion={(_id) => this.getQuestion(_id)} postAnswer={(author, answer, votes, qID) => this.postAnswer(author, answer, votes, qID)} Vote={(votes, aId) => this.Vote(votes, aId)}/>\r\n          </Router>\r\n\r\n        </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}